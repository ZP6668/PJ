`timescale 1ns/100ps

module DSP_simodule(
	input						clk,
	input		[29 : 0]		A,
	input		[17 : 0]		B,
	input		[47 : 0]		C,
	output	reg	[47 : 0]		P,
	input						ALUMODE,
	input		[4:0]			OPMODE
	);

wire	[47 : 0] 		multiplier_48;
wire	[47 : 0]		adder_48;
wire	[47 : 0]		subtracter_48;
reg		[29 : 0]		A_reg;
reg		[17 : 0]		B_reg;
reg		[47 : 0]		C_reg;
reg		[47 : 0]		M_reg;

reg		[47 : 0]		X;
reg		[47 : 0]		Y;
reg		[47 : 0]		Z;

initial begin
	A_reg = 0;
	B_reg = 0;
	C_reg = 0;
	M_reg = 0;
	P = 0;
end

//Multiplier
assign multiplier_48 	= {{18{A_reg[29]}}, A_reg} * {{30{B_reg[17]}}, B_reg};

assign adder_48			= Z + (X + Y);
assign subtracter_48	= Z - (X + Y);

always @(*) begin
	case(OPMODE[1:0])
		2'b00:		X	= 48'b0;
		2'b01:		X	= 48'b0;
		2'b10:		X	= P;
		2'b11:		X	= {A_reg, B_reg};
		default:	X	= 48'b0;
	endcase
end

always @(*) begin
	case(OPMODE[2])
		1'b0:		Y	= 48'b0;
		1'b1:		Y	= M_reg;
		default:	Y	= 48'b0;
	endcase
end

always @(*) begin
	case(OPMODE[4:3])
		2'b00:		Z	= 48'b0;
		2'b10:		Z	= P;
		2'b11:		Z	= C_reg;
		default:	Z	= 48'b0;
	endcase
end

always @(posedge clk) begin
	A_reg		<= A;
	B_reg		<= B;
	C_reg		<= C;
	M_reg		<= multiplier_48;
	P			<= ALUMODE ? subtracter_48 : adder_48;
end

endmodule
