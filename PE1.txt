module PE1(
	input								clk,
	input								rst,
	// input								sel_DW_9,
	// input								sel_DW_9_d6,
	// input		[10: 0]					sel,    //^^^^^^^^	
	// input		[1:0]					ctl,
	input		[1:0]					ctl_d3,
	input		[1:0]					ctl_d4,
	input								cls, //replace ctl_d4 == 0
	input		[1:0]					parallel_mode,
	// input		[7:0]					pwindata,  //^^^^^^^^^
	input		[7:0]					ifm,
	input		[2:0]					ifm_bit,
	input		[15:0]					wts,
	input		[1:0]					wts_bit,
	// output	reg [7:0] 					wts0, wts1, ifm_pe,	
	output	reg	[53:0]					ofm
);

wire[24:0]			A;
wire[24:0]			D;
wire[17:0]			B;
wire[47:0]			C;
wire[47:0]			P;




// wire                PW;
//wire[1:0]           ctl;

//reg [24:0] AD;
//reg [47:0] P;
//always @(posedge clk) begin
//    AD  <= A + D;
//    P   <= {{23{AD[24]}},AD} * {{30{B[17]}},B};
//end

reg	[1:0]			A_1_0, A_3_2, A_5_4, A_7_6;
reg	[1:0]			D_11_10, D_13_12, D_15_14, D_17_16, D_19_18;
reg	[3:0]			D_23_20;
reg	[1:0]			B_1_0, B_3_2, B_5_4, B_7_6;

// assign PW = (sel[7:4] == 4'b0111);
// assign ctl = sel[1:0];

// weight
///////////////////////////////////////////////////////////
always @(posedge clk) begin
	case(wts_bit)
		2'b00,							// 2bit
		2'b01,							// 4bit
		2'b10,							// 6bit
		2'b11:	A_1_0	<= wts[1:0];	// 8bit
		default:	A_1_0	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	A_3_2	<= {2{wts[1]}};	// 2bit
		2'b01,							// 4bit
		2'b10,							// 6bit
		2'b11:	A_3_2	<= wts[3:2];	// 8bit
		default:	A_3_2	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	A_5_4	<= {2{wts[1]}};	// 2bit
		2'b01:	A_5_4	<= {2{wts[3]}};	// 4bit
		2'b10,							// 6bit
		2'b11:	A_5_4	<= wts[5:4];	// 8bit
		default:	A_5_4	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	A_7_6	<= ifm_bit[0] ? (wts[3:2] + {2{wts[1]}}) : {2{wts[1]}};	// 2bit, parallel_mode = 4 or 3
		2'b01:	A_7_6	<= {2{wts[3]}};											// 4bit
		2'b10:	A_7_6	<= {2{wts[5]}};											// 6bit
		2'b11:	A_7_6	<= wts[7:6];											// 8bit
		default:	A_7_6	<= 2'd0;
	endcase
end
assign	A = {{17{A_7_6[1]}}, A_7_6, A_5_4, A_3_2, A_1_0};

always @(posedge clk) begin
	case(wts_bit)
		2'b00:	D_11_10	<= ifm_bit[0] ? 2'd0 : wts[3:2];	// 2bit parallel_mode = 4 or 3
		2'b01:	D_11_10	<= ifm_bit[2] ? 2'd0 : wts[5:4];	// 4bit parallel_mode = 2 or 3
		default:	D_11_10	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	D_13_12	<= ifm_bit[0] ? wts[5:4] : {2{wts[3]}};	// 2bit parallel_mode = 4 or 3
		2'b01:	D_13_12	<= ifm_bit[2] ? 2'd0 : wts[7:6];		// 4bit parallel_mode = 2 or 3
		default:	D_13_12	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	D_15_14	<= ifm_bit[0] ? {2{wts[5]}} : {2{wts[3]}};	// 2bit parallel_mode = 4 or 3
		2'b01:	D_15_14	<= ifm_bit[2] ? 2'd0 : {2{wts[7]}};			// 4bit parallel_mode = 2 or 3
		default:	D_15_14	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	D_17_16	<= ifm_bit[0] ? {2{wts[5]}} : {2{wts[3]}};	// 2bit parallel_mode = 4 or 3
		2'b01:	D_17_16	<= ifm_bit[2] ? wts[5:4] : {2{wts[7]}};		// 4bit parallel_mode = 2 or 3
		2'b10:	D_17_16	<= wts[7:6];								// 6bit
		2'b11:	D_17_16	<= wts[9:8];								// 8bit
		default:	D_17_16	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	D_19_18	<= ifm_bit[0] ? {2{wts[5]}} : {2{wts[3]}};	// 2bit parallel_mode = 4 or 3
		2'b01:	D_19_18	<= ifm_bit[2] ? wts[7:6] : {2{wts[7]}};		// 4bit parallel_mode = 2 or 3
		2'b10:	D_19_18	<= wts[9:8];								// 6bit
		2'b11:	D_19_18	<= wts[11:10];								// 8bit
		default:	D_19_18	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(wts_bit)
		2'b00:	D_23_20	<= ifm_bit[0] ? {{2{wts[7]}}, wts[7:6]} + {4{wts[5]}} : {4{wts[3]}} + {{2{wts[5]}}, wts[5:4]};	// 2bit parallel_mode = 4 or 3
		2'b01:	D_23_20	<= ifm_bit[2] ? {4{wts[7]}} : {4{wts[7]}} + wts[11:8];											// 4bit parallel_mode = 2 or 3
		2'b10:	D_23_20	<={{2{wts[11]}}, wts[11:10]};																	// 6bit
		2'b11:	D_23_20	<= wts[15:12];																					// 8bit
		default:	D_23_20	<= 4'd0;
	endcase
end
assign	D = {D_23_20[3], D_23_20, D_19_18, D_17_16, D_15_14, D_13_12, D_11_10, 10'd0};
///////////////////////////////////////////////////////////

// input feature map
///////////////////////////////////////////////////////////
always @(posedge clk) begin
	case(ifm_bit)
		3'b001,
		3'b010,
		3'b100:		B_1_0	<= ifm[1:0];
		default:	B_1_0	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(ifm_bit)
		3'b001,
		3'b010,
		3'b100:		B_3_2	<= ifm[3:2];
		default:	B_3_2	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(ifm_bit)
		3'b001:		B_5_4	<= {2{ifm[3]}};
		3'b010,
		3'b100:		B_5_4	<= ifm[5:4];
		default:	B_5_4	<= 2'd0;
	endcase
end
always @(posedge clk) begin
	case(ifm_bit)
		3'b001:		B_7_6	<= {2{ifm[3]}};    //ifm 4b
		3'b010:		B_7_6	<= {2{ifm[5]}};    //6b
		3'b100:		B_7_6	<= ifm[7:6];       //8b
		default:	B_7_6	<= 2'd0;
	endcase
end
// always @(posedge clk) begin
// 	case(ifm_bit)
// 		3'b001,
// 		3'b010,
// 		3'b100:		B_1_0	<= PW ? pwindata[1:0] : ifm[1:0];
// 		default:	B_1_0	<= 2'd0;
// 	endcase
// end
// always @(posedge clk) begin
// 	case(ifm_bit)
// 		3'b001,
// 		3'b010,
// 		3'b100:		B_3_2	<= PW ? pwindata[3:2] : ifm[3:2];
// 		default:	B_3_2	<= 2'd0;
// 	endcase
// end
// always @(posedge clk) begin
// 	case(ifm_bit)
// 		3'b001:		B_5_4	<= PW ? {2{pwindata[3]}} : {2{ifm[3]}};
// 		3'b010,
// 		3'b100:		B_5_4	<= PW ? pwindata[5:4] : ifm[5:4];
// 		default:	B_5_4	<= 2'd0;
// 	endcase
// end
// always @(posedge clk) begin
// 	case(ifm_bit)
// 		3'b001:		B_7_6	<= PW ? {2{pwindata[3]}} : {2{ifm[3]}};    //ifm 4b
// 		3'b010:		B_7_6	<= PW ? {2{pwindata[5]}} : {2{ifm[5]}};    //6b
// 		3'b100:		B_7_6	<= PW ? pwindata[7:6] : ifm[7:6];       //8b
// 		default:	B_7_6	<= 2'd0;
// 	endcase
// end
assign	B = {{10{B_7_6[1]}}, B_7_6, B_5_4, B_3_2, B_1_0};
///////////////////////////////////////////////////////////
// always @(posedge clk) begin
//     case(sel[4])//
//         1'd1:       C   <= {{24{psum[23]}},psum};
//         // 1'd1:       C   <= 'd0;
//         default:    C   <= 'd0;
//     endcase
// end
assign 	C = 48'd0;

// reg [1:0]		ctl_d1, ctl_d2, ctl_d3, ctl_d4;
// always @(posedge clk) begin
// 	ctl_d1	<= ctl;
// 	ctl_d2	<= ctl_d1;
//	ctl_d3	<= ctl_d2;
//	ctl_d4	<= ctl_d3;
// end
reg	[47:0]		P_reg;
always @(posedge clk) begin
	P_reg	<= P;
end
//wire cls = ctl_d4 == 0;


reg [15:0]	adder0_A, adder0_B;
reg [11:0]	adder1_A, adder1_B;
reg [11:0]	adder2_A, adder2_B;
reg [7:0]	adder3_A, adder3_B;
reg [5:0]	adder4_A, adder4_B;
reg adder0_CIN, adder1_CIN, adder2_CIN, adder3_CIN, adder4_CIN;


// wire [16:0] adder0 = sel_DW_9 ? {adder0_B[15],adder0_B} : (adder0_A + adder0_B + adder0_CIN);
// wire [12:0] adder1 = sel_DW_9 ? {adder1_B[11],adder1_B} : (adder1_A + adder1_B + adder1_CIN);
// wire [12:0] adder2 = sel_DW_9 ? {adder2_B[11],adder2_B} : (adder2_A + adder2_B + adder2_CIN);
// wire [8:0]	adder3 = sel_DW_9 ? {adder3_B[7],adder3_B} : (adder3_A + adder3_B + adder3_CIN);
// wire [6:0]	adder4 = sel_DW_9 ? {adder4_B[5],adder4_B} : (adder4_A + adder4_B + adder4_CIN);
wire [16:0] adder0 = adder0_A + adder0_B + adder0_CIN;
wire [12:0] adder1 = adder1_A + adder1_B + adder1_CIN;
wire [12:0] adder2 = adder2_A + adder2_B + adder2_CIN;
wire [8:0]	adder3 = adder3_A + adder3_B + adder3_CIN;
wire [6:0]	adder4 = adder4_A + adder4_B + adder4_CIN;

// always @(posedge clk) begin
// 	if(ctl_d3[0]) begin//使能信号不对
// 	// if(ctl_d1[0]) begin
// 		case(parallel_mode)
// 			2'd1:		{adder4_B, adder3_B, adder2_B, adder1_B, adder0_B}	<= {6'd0,       {8{P[15]}},             {{8{P[31]}}, P[31:28]}, P[27:16],              P[15:0]};
// 			2'd2:		{adder4_B, adder3_B, adder2_B, adder1_B, adder0_B}	<= {{6{P[29]}}, {8{P[19]}},             {{2{P[29]}}, P[29:20]}, {{2{P[19]}},P[19:10]}, {{6{P[9]}}, P[9:0]}};
// 			2'd3:		{adder4_B, adder3_B, adder2_B, adder1_B, adder0_B}	<= {{6{P[25]}}, {{2{P[25]}}, P[25:20]}, {{4{P[17]}}, P[17:12]}, {{4{P[11]}}, P[11:6]}, {{10{P[5]}}, P[5:0]}};
// 			default:	{adder4_B, adder3_B, adder2_B, adder1_B, adder0_B}	<= {6'd0, 8'd0, 12'd0, 12'd0, 16'd0};
// 		endcase
// 	end
// 	else begin
// 		{adder4_B, adder3_B, adder2_B, adder1_B, adder0_B}	<= {6'd0, 8'd0, 12'd0, 12'd0, 16'd0};
// 	end
// end

/////////////////////////////////// adder0 ///////////////////////////////////
always @(posedge clk) begin
// if(ctl_d1[1]) begin
	if(cls) begin        //last is ctl_d1[1]
		adder0_A	<= 16'd0;
	end
	else if(ctl_d4[0]) begin   //^^^^^^^^^^
	// else if(ctl_d1[0]) begin
		adder0_A	<= adder0;
	end
	else begin
		adder0_A	<= adder0_A;
	end
end
always @(posedge clk) begin
	if(ctl_d3[0]) begin
		case(parallel_mode)
			2'd1:		adder0_B	<= P[15:0];
			2'd2:		adder0_B	<= {{6{P[9]}}, P[9:0]};
			2'd3:		adder0_B	<= {{10{P[9]}}, P[5:0]};
			default:	adder0_B	<= 16'd0;
		endcase
	end
	else begin
		adder0_B	<= 16'd0;
	end
end
always @(posedge clk) begin
	adder0_CIN	<= 1'b0;
end
//////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// adder1 ///////////////////////////////////
always @(posedge clk) begin
	if(cls) begin
	// if(ctl_d1[1]) begin
		adder1_A	<= 12'd0;
	end
	else if(ctl_d4[0]) begin
	// else if(ctl_d1[0]) begin
		adder1_A	<= adder1;
	end
	else begin
		adder1_A	<= adder1_A;
	end
end
always @(posedge clk) begin
	if(ctl_d3[0]) begin
		case(parallel_mode)
			2'd1:		adder1_B	<= P[27:16];
			2'd2:		adder1_B	<= {{2{P[19]}}, P[19:10]};
			2'd3:		adder1_B	<= {{4{P[11]}}, P[11:6]};
			default:	adder1_B	<= 12'd0;
		endcase
	end
	else begin
		adder1_B	<= 16'd0;
	end
end
always @(posedge clk) begin
// always @(*) begin
	if(ctl_d3[0]) begin
	// if(ctl_d1[0]) begin
		case(parallel_mode)
			2'd1:		adder1_CIN	<= P[15];
			2'd2:		adder1_CIN	<= P[9];
			2'd3:		adder1_CIN	<= P[5];
			default:	adder1_CIN	<= 1'd0;
		endcase
	end
	else begin
		adder1_CIN	<= 1'd0;
	end
end
//////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// adder2 ///////////////////////////////////
always @(posedge clk) begin
	if(cls) begin
	// if(ctl_d1[1]) begin
		adder2_A	<= 16'd0;
	end
	else if(ctl_d4[0])
	// else if(ctl_d1[0])
		adder2_A	<= adder2;
	else begin
		adder2_A	<= adder2_A;
	end
end
always @(posedge clk) begin
	if(ctl_d3[0] | ctl_d4[0]) begin
		case(parallel_mode)
			2'd1:		adder2_B	<= {{8{P_reg[31]}}, P_reg[31:28]};
			2'd2:		adder2_B	<= {{2{P[29]}}, P[29:20]};
			2'd3:		adder2_B	<= {{4{P[17]}}, P[17:12]};
			default:	adder2_B	<= 12'd0;
		endcase
	end
	else begin
		adder2_B	<= 12'd0;
	end
end
always @(posedge clk) begin
// always @(*) begin
	if(ctl_d3[0] | ctl_d4[0]) begin
	// if(ctl_d3[0]) begin
	// if(ctl_d1[0]) begin
		case(parallel_mode)
			2'd1:		adder2_CIN	<= adder1[12];
			2'd2:		adder2_CIN	<= P[19];
			2'd3:		adder2_CIN	<= P[11];
			default:	adder2_CIN	<= 1'b0;
		endcase
	end
	else begin
		adder2_CIN	<= 1'd0;
	end
end
//////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// adder3 ///////////////////////////////////
always @(posedge clk) begin
	if(cls) begin
	// if(ctl_d1[1]) begin
		adder3_A	<= 8'd0;
	end
	else if(ctl_d4[0]) begin
	// else if(ctl_d1[0]) begin
		adder3_A	<= adder3;
	end
	else begin
		adder3_A	<= adder3_A;
	end
end
always @(posedge clk) begin
	if(ctl_d3[0] | ctl_d4[0]) begin
		case(parallel_mode)
			2'd1:		adder3_B	<= {8{P_reg[15]}};
			2'd2:		adder3_B	<= {8{P_reg[19]}};
			2'd3:		adder3_B	<= {{2{P[25]}}, P[25:20]};
			default:	adder3_B	<= 8'd0;
		endcase
	end
	else begin
		adder3_B	<= 8'd0;
	end
end
always @(posedge clk) begin
// always @(*) begin
	if(ctl_d3[0] | ctl_d4[0]) begin
	// if(ctl_d3[0]) begin
	// if(ctl_d1[0]) begin
		case(parallel_mode)
			2'd1:		adder3_CIN	<= adder0[16];
			2'd2:		adder3_CIN	<= adder1[12];
			2'd3:		adder3_CIN	<= P[19];
			default:	adder3_CIN	<= 1'd0;
		endcase
	end
	else begin
		adder3_CIN	<= 1'd0;
	end
end
//////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// adder4 ///////////////////////////////////
always @(posedge clk) begin
	if(cls) begin
	// if(ctl_d1[1]) begin
		adder4_A	<= 6'd0;
	end
	else if(ctl_d4[0]) begin
	// else if(ctl_d1[0]) begin
		adder4_A	<= adder4;
	end
	else begin
		adder4_A	<= adder4_A;
	end
end
always @(posedge clk) begin
	if(ctl_d4[0]) begin
		case(parallel_mode)
			2'd1:		adder4_B	<= 6'd0;
			2'd2:		adder4_B	<= {6{P_reg[29]}};
			2'd3:		adder4_B	<= {6{P_reg[25]}};
			default:	adder4_B	<= 6'd0;
		endcase
	end
	else begin
		adder4_B	<= 6'd0;
	end
end
always @(posedge clk) begin
// always @(*) begin
	if(ctl_d4[0]) begin
	// if(ctl_d1[0]) begin
		case(parallel_mode)
			2'd1:		adder4_CIN	<= 1'd0;
			2'd2:		adder4_CIN	<= adder2[12];
			2'd3:		adder4_CIN	<= adder3[8];
			default:	adder4_CIN	<= 1'd0;
		endcase
	end
	else begin
		adder4_CIN	<= 1'd0;
	end
end
//////////////////////////////////////////////////////////////////////////////
 always @(posedge clk) begin
 	ofm	<= {adder4[5:0], adder3[7:0], adder2[11:0], adder1[11:0], adder0[15:0]};
 end
//always @(posedge clk) begin
//	if((ctl_d1[0]))begin
//	// if((cls) | (ctl_d4[0] & sel_DW_9_d6))begin
//		case(parallel_mode)
//			// 2'd1:		ofm	<= {adder2[7:0], adder1_A[15:0], adder3[3:0], adder0_A[19:0]};
//			// 2'd2:		ofm	<= {adder4[7:0], adder3[7:0], adder1_A[15:0], adder0_A[15:0]};
//			// 2'd3:		ofm	<= {adder4[3:0], adder3[7:0], adder2[11:0], adder1[11:0], adder0[11:0]};
//			2'd1:		ofm	<= {adder2[11:0], adder1_A[11:0], adder3[7:0], adder0_A[15:0]};
//			2'd2:		ofm	<= {adder4[3:0], adder2[11:0], adder3[3:0], adder1_A[11:0], adder0_A[15:0]};
//			2'd3:		ofm	<= {adder4[5:0], adder3_A[5:0], adder2[11:0], adder1[11:0], adder0[11:0]};
//			default:	ofm	<= 48'd0;
//		endcase
//	end
//	else begin
//		ofm	<= 48'd0;
//	end
//end

DSP48E1 #(
    // Feature Control Attributes: Data Path Selection
    .A_INPUT("DIRECT"),					// Selects A input source, "DIRECT" (A port) or "CASCADE" (ACIN port)
    .B_INPUT("DIRECT"),					// Selects B input source, "DIRECT" (B port) or "CASCADE" (BCIN port)
    .USE_DPORT("TRUE"),					// Select D port usage (TRUE or FALSE)
    .USE_MULT("MULTIPLY"),				// Select multiplier usage ("MULTIPLY", "DYNAMIC", or "NONE")
    .USE_SIMD("ONE48"),					// SIMD selection ("ONE48", "TWO24", "FOUR12")
    // Pattern Detector Attributes: Pattern Detection Configuration
    .AUTORESET_PATDET("NO_RESET"),		// "NO_RESET", "RESET_MATCH", "RESET_NOT_MATCH" 
    .MASK(48'h3fffffffffff),			// 48-bit mask value for pattern detect (1=ignore)
    .PATTERN(48'h000000000000),			// 48-bit pattern match for pattern detect
    .SEL_MASK("MASK"),					// "C", "MASK", "ROUNDING_MODE1", "ROUNDING_MODE2" 
    .SEL_PATTERN("PATTERN"),			// Select pattern value ("PATTERN" or "C")
    .USE_PATTERN_DETECT("NO_PATDET"),	// Enable pattern detect ("PATDET" or "NO_PATDET")
    // Register Control Attributes: Pipeline Register Configuration
     .ACASCREG(0),						// Number of pipeline stages between A/ACIN and ACOUT (0, 1 or 2)
     .ADREG(0),							// Number of pipeline stages for pre-adder (0 or 1)
     .ALUMODEREG(0),						// Number of pipeline stages for ALUMODE (0 or 1)
     .AREG(0),							// Number of pipeline stages for A (0, 1 or 2)
     .BCASCREG(0),						// Number of pipeline stages between B/BCIN and BCOUT (0, 1 or 2)
     .BREG(0),							// Number of pipeline stages for B (0, 1 or 2)
     .CARRYINREG(0),						// Number of pipeline stages for CARRYIN (0 or 1)
     .CARRYINSELREG(0),					// Number of pipeline stages for CARRYINSEL (0 or 1)
     .CREG(0),							// Number of pipeline stages for C (0 or 1)
     .DREG(0),							// Number of pipeline stages for D (0 or 1)
     .INMODEREG(0),						// Number of pipeline stages for INMODE (0 or 1)
    .MREG(1),							// Number of multiplier pipeline stages (0 or 1)
    .OPMODEREG(0),						// Number of pipeline stages for OPMODE (0 or 1)
    .PREG(1)							// Number of pipeline stages for P (0 or 1)
     
    //  .MREG(0),							// Number of multiplier pipeline stages (0 or 1)
    //  .OPMODEREG(0),						// Number of pipeline stages for OPMODE (0 or 1)
    //  .PREG(0)

)
 DSP48E1_inst (
    // Cascade: 30-bit (each) output: Cascade Ports
    .ACOUT(),						// 30-bit output: A port cascade output
    .BCOUT(),						// 18-bit output: B port cascade output
    .CARRYCASCOUT(),				// 1-bit output: Cascade carry output
    .MULTSIGNOUT(),					// 1-bit output: Multiplier sign cascade output
    .PCOUT(),						// 48-bit output: Cascade output
    // Control: 1-bit (each) output: Control Inputs/Status Bits
    .OVERFLOW(),					// 1-bit output: Overflow in add/acc output
    .PATTERNBDETECT(),				// 1-bit output: Pattern bar detect output
    .PATTERNDETECT(),				// 1-bit output: Pattern detect output
    .UNDERFLOW(),					// 1-bit output: Underflow in add/acc output
    // Data: 4-bit (each) output: Data Ports
    .CARRYOUT(),					// 4-bit output: Carry output
    .P(P),							// 48-bit output: Primary data output
    // Cascade: 30-bit (each) input: Cascade Ports
    .ACIN(),						// 30-bit input: A cascade data input
    .BCIN(),						// 18-bit input: B cascade input
    .CARRYCASCIN(),					// 1-bit input: Cascade carry input
    .MULTSIGNIN(),					// 1-bit input: Multiplier sign input
    .PCIN(),						// 48-bit input: P cascade input
    // Control: 4-bit (each) input: Control Inputs/Status Bits
    .ALUMODE({4'b0000}),			// 4-bit input: ALU control input
    .CARRYINSEL(3'b0),				// 3-bit input: Carry select input
    .CLK(clk),						// 1-bit input: Clock input
    .INMODE(5'b00100),				// 5-bit input: INMODE control input
    .OPMODE(7'b0110101),			// 7-bit input: Operation mode input
    // Data: 30-bit (each) input: Data Ports
    .A(A),							// 30-bit input: A data input
    .B(B),							// 18-bit input: B data input
    .C(C),							// 48-bit input: C data input
    .CARRYIN(1'b0),					// 1-bit input: Carry input signal
    .D(D),							// 25-bit input: D data input
    // Reset/Clock Enable: 1-bit (each) input: Reset/Clock Enable Inputs
    .CEA1(1'b1),					// 1-bit input: Clock enable input for 1st stage AREG
    .CEA2(1'b1),					// 1-bit input: Clock enable input for 2nd stage AREG
    .CEAD(1'b1),					// 1-bit input: Clock enable input for ADREG
    .CEALUMODE(1'b1),				// 1-bit input: Clock enable input for ALUMODE
    .CEB1(1'b1),					// 1-bit input: Clock enable input for 1st stage BREG
    .CEB2(1'b1),					// 1-bit input: Clock enable input for 2nd stage BREG
    .CEC(1'b1),						// 1-bit input: Clock enable input for CREG
    .CECARRYIN(1'b1),				// 1-bit input: Clock enable input for CARRYINREG
    .CECTRL(1'b1),					// 1-bit input: Clock enable input for OPMODEREG and CARRYINSELREG
    .CED(1'b1),						// 1-bit input: Clock enable input for DREG
    .CEINMODE(1'b1),				// 1-bit input: Clock enable input for INMODEREG
    .CEM(1'b1),						// 1-bit input: Clock enable input for MREG
    .CEP(1'b1),						// 1-bit input: Clock enable input for PREG
    .RSTA(rst),						// 1-bit input: Reset input for AREG
    .RSTALLCARRYIN(rst),			// 1-bit input: Reset input for CARRYINREG
    .RSTALUMODE(rst),				// 1-bit input: Reset input for ALUMODEREG
    .RSTB(rst),						// 1-bit input: Reset input for BREG
    .RSTC(rst),						// 1-bit input: Reset input for CREG
    .RSTCTRL(rst),					// 1-bit input: Reset input for OPMODEREG and CARRYINSELREG
    .RSTD(rst),						// 1-bit input: Reset input for DREG and ADREG
    .RSTINMODE(rst),				// 1-bit input: Reset input for INMODEREG
    .RSTM(rst),						// 1-bit input: Reset input for MREG
    .RSTP(rst)						// 1-bit input: Reset input for PREG
);


// reg signed [7:0] 		wts0, wts1, ifm_pe;
// wire [7:0]          wts0 = wts[7:0];
// wire [7:0]          wts1 = wts[15:8];
// wire [7:0]          ifm_pe = ifm;
// wire [15:0]			o3 = ((ifm == 'd0) | (wts0 == 'd0)) ? 'd0 : ((ifm[7] == wts0[7])? ifm * wts0 : {3'b1 , ifm[6:0] * wts0[6:0]});
// wire [15:0]			o2 = ((ifm == 'd0) | (wts1 == 'd0)) ? 'd0 : ((ifm[7] == wts1[7])? ifm * wts1 : {3'b1 , ifm[6:0] * wts1[6:0]});
// reg [15:0]			o1, o4;
// ////*************************************************** veri PE ifm * wts ************************************************************
// reg [23:0]		ans_8_8_0, ans_8_8_1;
// always @(posedge clk) begin
//    	wts0 <= wts[7:0];
//    	wts1 <= wts[15:8];
//    	ifm_pe <= ifm;
// 	o1			<= o2;
// 	o4			<= o3;
// 	if(rst) begin
// 		ans_8_8_0		<= 'd0;
// 		ans_8_8_1		<= 'd0;
// 	end
// 	else begin
// 		ans_8_8_0		<= ans_8_8_0 + {{8{o4[15]}} , o4};
// 		// ans_8_8_0		<= ans_8_8_0 + {{8{adder0_B[15]}} , adder0_B};
// 		ans_8_8_1		<= ans_8_8_1 + {{12{o1[11]}} , o1};
// 		// ans_8_8_1		<= ans_8_8_1 + {{12{adder1_B[11]}} , adder1_B};
// 	end
// end
//***************************************************************************************************************************************
// wire [15:0]		ofm0 = wts0 * ifm;
// wire [15:0]		ofm1 = wts1 * ifm;
// wire [23:0]		ofm0_ans = {{8{ofm0[15]}}, ofm0};
// wire [23:0]		ofm1_ans = {{8{ofm1[15]}}, ofm1};
// reg[23:0]		ofm0_ans_d1, ofm0_ans_d2, ofm0_ans_d3, ofm0_ans_d4, ofm0_ans_d5;
// reg[23:0]		ofm1_ans_d1, ofm1_ans_d2, ofm1_ans_d3, ofm1_ans_d4, ofm1_ans_d5;
// always @(posedge clk) begin
// 	ofm0_ans_d1	<= ofm0_ans;
// 	ofm0_ans_d2	<= ofm0_ans_d1;
// 	ofm0_ans_d3	<= ofm0_ans_d2;
// 	ofm0_ans_d4	<= ofm0_ans_d3;
// 	ofm0_ans_d5	<= ofm0_ans_d4;
// end
// always @(posedge clk) begin
// 	ofm1_ans_d1	<= ofm1_ans;
// 	ofm1_ans_d2	<= ofm1_ans_d1;
// 	ofm1_ans_d3	<= ofm1_ans_d2;
// 	ofm1_ans_d4	<= ofm1_ans_d3;
// 	ofm1_ans_d5	<= ofm1_ans_d4;
// end
wire [23:0]		ofm0_pe = {ofm[47:40], ofm[15:0]};
wire [23:0]		ofm1_pe = {ofm[39:28], ofm[27:16]};
// wire[23:0]		diff0 = ofm0_ans_d5 ^ ofm0_pe;
// wire[23:0]		diff1 = ofm1_ans_d5 ^ ofm1_pe;



// wire [7:0]	wts_8_0		= wts[7:0];
// wire [7:0]	wts_8_1		= wts[15:8];
// wire [5:0]	wts_6_0		= wts[5:0];
// wire [5:0]	wts_6_1		= wts[11:6];
// wire [3:0]	wts_4_0		= wts[3:0];
// wire [3:0]	wts_4_1		= wts[7:4];
// wire [3:0]	wts_4_2		= wts[11:8];
// wire [1:0]	wts_2_0		= wts[1:0];
// wire [1:0]	wts_2_1		= wts[3:2];
// wire [1:0]	wts_2_2		= wts[5:4];
// wire [1:0]	wts_2_3		= wts[7:6];
// wire [7:0]	ifm_8		= ifm[7:0];
// wire [5:0]	ifm_6		= ifm[5:0];
// wire [3:0]	ifm_4		= ifm[3:0];

// wire [15:0]	ofm_8_8_0	= P[15:0];
// wire [15:0]	ofm_8_8_1	= P[31:16] + P[15];
// wire [15:0]	ofm_6_8_0	= P[15:0];
// wire [15:0]	ofm_6_8_1	= P[31:16] + P[15];
// wire [15:0]	ofm_4_8_0	= P[15:0];
// wire [15:0]	ofm_4_8_1	= P[31:16] + P[15];

// wire [15:0]	ofm_8_6_0	= P[15:0];
// wire [15:0] ofm_8_6_1	= P[31:16] + P[15];
// wire [15:0]	ofm_6_6_0	= P[15:0];
// wire [15:0] ofm_6_6_1	= P[31:16] + P[15];
// wire [15:0]	ofm_4_6_0	= P[15:0];
// wire [15:0] ofm_4_6_1	= P[31:16] + P[15];

// wire [11:0]	ofm_8_4_0	= P[15:0];
// wire [11:0] ofm_8_4_1	= P[31:16] + P[15];
// wire [9:0]	ofm_6_4_0	= P[9:0];
// wire [9:0]  ofm_6_4_1	= P[19:10] + P[9];
// wire [9:0]  ofm_6_4_2	= P[29:20] + P[19];
// wire [7:0]	ofm_4_4_0	= P[9:0];
// wire [7:0]  ofm_4_4_1	= P[19:10] + P[9];
// wire [7:0]  ofm_4_4_2	= P[29:20] + P[19];

// wire [9:0]	ofm_8_2_0	= P[9:0];
// wire [9:0]	ofm_8_2_1	= P[19:10] + P[9];
// wire [9:0]	ofm_8_2_2	= P[29:20] + P[19];
// wire [7:0]	ofm_6_2_0	= P[9:0];
// wire [7:0]	ofm_6_2_1	= P[19:10] + P[9];
// wire [7:0]	ofm_6_2_2	= P[29:20] + P[19];
// wire [5:0]	ofm_4_2_0	= P[5:0];
// wire [5:0]	ofm_4_2_1	= P[11:6] + P[5];
// wire [5:0]	ofm_4_2_2	= P[17:12] + P[11];
// wire [5:0]	ofm_4_2_3	= P[25:20] + P[17];

endmodule
