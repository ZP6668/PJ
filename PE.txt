`include "./config.v"
module PE(
	input											clk,
	input											rst,
	input											residual,
	input		[10: 0]								sel,
	input		[47 : 0]				            ifm,
	input		[15 : 0]			                gamma,    //BN
	input       [31 : 0]                            bias,
	input		[23 : 0]				            psum,
	input       [15 : 0]                            shift,   //¡­¡­¡­¡­¡­¡­¡­¡­¡­¡­¡­¡­¡­¡­
	input       [5  : 0]                            layer,
	input                                           start_psum,
	
    input		[`DATA_WIDTH - 1 : 0]				residual_data,
	input		[7 : 0]				                x0,
	input		[7 : 0]				                x1,
	output reg	[23 : 0]			                ofm_psum,
	output reg	[7 : 0]			                    ofm
);




//standard conv:		11'b00000100001		0x021
//pw conv:				11'b00001110001		0x071
//bias 1:				11'b01010110001		0x281   //para1
//bias 2:				11'b01010110010		0x282
//bias 3:				11'b01010110011		0x283   //para2
//bias 4:				11'b01010110100		0x284
//bias 5:				11'b01010110101		0x285
//bias 6:				11'b01010110110		0x286   //para3
//bias 7:				11'b01010110111		0x287
//bias 8:				11'b01010111000		0x288
//bias 9:				11'b01010111001		0x289
//pooling:				11'b10101101010		0x56A   //pooling

//hold:					11'b01100000000		0x300
//reset:				11'b11000000000		0x600

//DSP input
//****************************************************************************************************
reg [24:0]          A, D;
reg [17:0]          B;
reg [47:0]          C;
wire[47:0]          P;
//reg signed [47:0]          P;
reg[10:0]           sel_d1, sel_d2, sel_d3, sel_d4, sel_d5;
// reg[7:0]            ofm_next;

always @(posedge clk) begin
    sel_d1    <= sel;
    sel_d2    <= sel_d1;
    sel_d3    <= sel_d2;
    sel_d4    <= sel_d3;
    sel_d5    <= sel_d4;
    // ofm_next     <= P;
end

always @(posedge clk) begin
    case(sel[3:0])
        4'd1:       A   <= {ifm[23], ifm[23:0]};     //24b parallel mode
        4'd2:       A   <= {ifm[47], ifm[47:24]};    
        4'd3:       A   <= {{9{ifm[15]}}, ifm[15:0]};   //16b
        4'd4:       A   <= {{9{ifm[31]}}, ifm[31:16]};
        4'd5:       A   <= {{9{ifm[47]}}, ifm[47:32]};
        4'd6:       A   <= {{13{ifm[11]}}, ifm[11:0]};    //12b
        4'd7:       A   <= {{13{ifm[23]}}, ifm[23:12]};
        4'd8:       A   <= {{13{ifm[35]}}, ifm[35:24]};
        4'd9:       A   <= {{13{ifm[47]}}, ifm[47:36]};
        4'd10:      A   <= {25{x0[7]}};
        default:    A   <= 25'd0;
    endcase
end

// always@(posedge clk) begin
//     A_next   <= P;
// end

always @(posedge clk) begin
    case(sel[4])
         1'd1:       D   <= {psum[23],psum};
//        1'd1:       D   <= ofm_psum;
        // 1'd1:       D   <= bias;
        default:    D   <= 25'd0;
    endcase
end

// always @(posedge clk) begin
//     case(sel_d3[4])
//         // 1'd1:       D   <= psum;
//         // 1'd1:       D   <= bias;
//         1'd1:       D_next   <= residual_data;
//         // 1'd1:       D   <= 'd0;
//         default:    D_next   <= 25'd0;
//     endcase
// end

always @(posedge clk) begin
    case(sel[6:5])
        // 2'd1:       B   <= gamma;
        2'd1:       B   <= start_psum ? 'd1 : shift;
        2'd2:       B   <= 18'd1;
        2'd3:       B   <= {{10{x0[7]}}, x0};
        default:    B   <= 18'd0;
    endcase
end
// always @(posedge clk) begin
//     case(sel_d3[6:5])
//         // 2'd1:       B   <= gamma;
//         2'd1:       B_next   <= shift;
//         2'd2:       B_next   <= 18'd1;
//         default:    B_next   <= 18'd0;
//     endcase
// end

always @(posedge clk) begin
    case(sel[8:7])
        2'd1:       C   <= start_psum ? 'd0 : {{16{bias[31]}}, bias};
        // 2'd1:       C   <= 'd0;
        2'd2:       C   <= {{40{x1[7]}}, x1};
        default:    C   <= 48'd0;
    endcase
end

// always @(posedge clk) begin
//     case (sel_d3[8:7])
//         2'd1:       C_next   <= 'd0;
//         default:    C_next   <= 48'd0;
//     endcase
// end
//****************************************************************************************************

reg [6:0]   opmode, opmode_next;
reg [3:0]   alumode;

always @(posedge clk) begin
    case(sel_d1[10:9])
        2'd1:       opmode  <= 7'b0110101;   //M , M , C
        2'd2:       opmode  <= 7'b0110011;   //A:B , 0 , C
        default:    opmode  <= 7'd0;
    endcase
end
// always @(posedge clk) begin
//     case(sel_d4[10:9])
//         2'd1:       opmode_next  <= 7'b0110101;   //M , M , C
//         2'd2:       opmode_next  <= 7'b0110011;   //A:B , 0 , C
//         default:    opmode_next  <= 7'd0;
//     endcase
// end
always @(posedge clk) begin
    case(sel[10:9])
        2'd1:       alumode <= 4'b0000;   //Z+X+Y+CIN
        2'd2:       alumode <= 4'b0011;    //Z-(X+Y+CIN)  max pooling , x1-x0
        default:    alumode <= 4'd0;
    endcase
end
///***********************************************************************************************
wire PW = sel[6:4] == 3'b111;
//****************************************************************************************************
//reg[7:0]    ofm_out;
reg signed [11:0]    ofm_out;//
always @(posedge clk) begin
    // case(sel_d5[10:9])
    case(sel_d3[10:9])
        // 2'd1:       ofm_out   <= start_psum ? P[23:0] : (P[47] ? P[26:19] : {P[23:16]});   //relu and shift cut 16 bit
        // 2'd1:       ofm_out   <= P[47] ? P[26:19] : {P[23:16]};   //relu and shift cut 16 bit
       // 2'd1:       ofm_out   <= (layer=='d14)? P[23:16]: (P[47] ? P[26:19] : ((P[46:16] > 127) ? 'd127 : ((P[46:16] < -127) ? -'d127 : P[23:16])));   //relu and shift cut 16 bit        
          //2'd1:       ofm_out   <= (P[25:16] > 127) ? 'd127 : ((P[25:16] < -127) ? -'d127 : ((layer=='d14)? P[23:16]: (P[47] ? P[26:19] : P[23:16])));   //relu and shift cut 16 bit        
        2'd1:       ofm_out   <= P[27:16];   //relu and shift cut 16 bit
        2'd2:       ofm_out   <= P[47] ? x0 : x1;
        default:    ofm_out   <= 'd0;
    endcase
end
//****************************************************************************************************
///add psum
///***********************************************************************************************
reg[23:0]    ofm_out_psum;
always@(posedge clk)begin
    case(sel_d3[10:9])
        2'd1:       ofm_out_psum    <= start_psum ? P[23:0] : 'd0;
        default:    ofm_out_psum   <= 'd0;
    endcase

    // ofm         <= (ofm_out > 127) ? 'd127 : (ofm_out < -127) ? -'d127 : ((layer=='d14)? ofm_out[7:0]: (ofm_out[10] ? ofm_out[10:3] : ofm_out[7:0]));
    ofm         <= (ofm_out > 127) ? 'd127 : ((layer=='d14) ? ((ofm_out < -127) ? -'d127:ofm_out[7:0]) : (ofm_out < -1016?-'d127:(ofm_out[10] ? ofm_out[10:3] : ofm_out[7:0]))) ; 
    ofm_psum    <= ofm_out_psum;
end

///add residual
///***********************************************************************************************
// reg signed[7:0]      ofm_residual;
// // assign ofm_residual = (ofm + residual_data) > 127 ? 127 : (ofm + residual_data);
// always @(posedge clk) begin
//     if(PW)
//         ofm_residual <= (ofm_out + residual_data) > 127 ? 'd127 : ((ofm_out + residual_data) < -127 ? -127 : (ofm_out + residual_data));
//     else
//         ofm_residual <= (ofm_out + residual_data) > 255 ? 'd255 : (ofm_out + residual_data);
// end
// reg[7:0]    ofm_reg;
// always @(posedge clk) begin
//     ofm_reg <= ofm_out;
//     if(residual & PW)
//         ofm <= ofm_residual;
//     else
//         ofm <= ofm_out;
// end
// wire[7:0]   ofm = residual & PW ? ofm_residual : ofm_reg;
//DSP instance
//****************************************************************************************************
DSP48E1 #(
    // Feature Control Attributes: Data Path Selection
    .A_INPUT("DIRECT"),					// Selects A input source, "DIRECT" (A port) or "CASCADE" (ACIN port)
    .B_INPUT("DIRECT"),					// Selects B input source, "DIRECT" (B port) or "CASCADE" (BCIN port)
    .USE_DPORT("TRUE"),					// Select D port usage (TRUE or FALSE)
    .USE_MULT("MULTIPLY"),				// Select multiplier usage ("MULTIPLY", "DYNAMIC", or "NONE")
    .USE_SIMD("ONE48"),					// SIMD selection ("ONE48", "TWO24", "FOUR12")
    // Pattern Detector Attributes: Pattern Detection Configuration
    .AUTORESET_PATDET("NO_RESET"),		// "NO_RESET", "RESET_MATCH", "RESET_NOT_MATCH" 
    .MASK(48'h3fffffffffff),			// 48-bit mask value for pattern detect (1=ignore)
    .PATTERN(48'h000000000000),			// 48-bit pattern match for pattern detect
    .SEL_MASK("MASK"),					// "C", "MASK", "ROUNDING_MODE1", "ROUNDING_MODE2" 
    .SEL_PATTERN("PATTERN"),			// Select pattern value ("PATTERN" or "C")
    .USE_PATTERN_DETECT("NO_PATDET"),	// Enable pattern detect ("PATDET" or "NO_PATDET")
    // Register Control Attributes: Pipeline Register Configuration
    .ACASCREG(0),						// Number of pipeline stages between A/ACIN and ACOUT (0, 1 or 2)
    .ADREG(0),							// Number of pipeline stages for pre-adder (0 or 1)
    .ALUMODEREG(0),						// Number of pipeline stages for ALUMODE (0 or 1)
    .AREG(0),							// Number of pipeline stages for A (0, 1 or 2)
    .BCASCREG(0),						// Number of pipeline stages between B/BCIN and BCOUT (0, 1 or 2)
    .BREG(0),							// Number of pipeline stages for B (0, 1 or 2)
    .CARRYINREG(0),						// Number of pipeline stages for CARRYIN (0 or 1)
    .CARRYINSELREG(0),					// Number of pipeline stages for CARRYINSEL (0 or 1)
    .CREG(1),							// Number of pipeline stages for C (0 or 1)
    .DREG(0),							// Number of pipeline stages for D (0 or 1)
    .INMODEREG(0),						// Number of pipeline stages for INMODE (0 or 1)
    .MREG(1),							// Number of multiplier pipeline stages (0 or 1)
    .OPMODEREG(0),						// Number of pipeline stages for OPMODE (0 or 1)
    .PREG(1)							// Number of pipeline stages for P (0 or 1)
)
    DSP48E1_inst (
        // Cascade: 30-bit (each) output: Cascade Ports
        .ACOUT(),						// 30-bit output: A port cascade output
        .BCOUT(),						// 18-bit output: B port cascade output
        .CARRYCASCOUT(),				// 1-bit output: Cascade carry output
        .MULTSIGNOUT(),					// 1-bit output: Multiplier sign cascade output
        .PCOUT(),						// 48-bit output: Cascade output
        // Control: 1-bit (each) output: Control Inputs/Status Bits
        .OVERFLOW(),					// 1-bit output: Overflow in add/acc output
        .PATTERNBDETECT(),				// 1-bit output: Pattern bar detect output
        .PATTERNDETECT(),				// 1-bit output: Pattern detect output
        .UNDERFLOW(),					// 1-bit output: Underflow in add/acc output
        // Data: 4-bit (each) output: Data Ports
        .CARRYOUT(),					// 4-bit output: Carry output
        .P(P),							// 48-bit output: Primary data output
        // Cascade: 30-bit (each) input: Cascade Ports
        .ACIN(),						// 30-bit input: A cascade data input
        .BCIN(),						// 18-bit input: B cascade input
        .CARRYCASCIN(),					// 1-bit input: Cascade carry input
        .MULTSIGNIN(),					// 1-bit input: Multiplier sign input
        .PCIN(),						// 48-bit input: P cascade input
        // Control: 4-bit (each) input: Control Inputs/Status Bits
        .ALUMODE(alumode),			// 4-bit input: ALU control input
        .CARRYINSEL(3'b0),				// 3-bit input: Carry select input
        .CLK(clk),						// 1-bit input: Clock input
        .INMODE(5'b00100),				// 5-bit input: INMODE control input
        .OPMODE(opmode),			// 7-bit input: Operation mode input
        // Data: 30-bit (each) input: Data Ports
        .A({{5{A[24]}}, A}),					// 30-bit input: A data input
        .B(B),							// 18-bit input: B data input
        .C(C),							// 48-bit input: C data input
        .CARRYIN(1'b0),					// 1-bit input: Carry input signal
        .D(D),							// 25-bit input: D data input
        // Reset/Clock Enable: 1-bit (each) input: Reset/Clock Enable Inputs
        .CEA1(1'b1),					// 1-bit input: Clock enable input for 1st stage AREG
        .CEA2(1'b1),					// 1-bit input: Clock enable input for 2nd stage AREG
        .CEAD(1'b1),					// 1-bit input: Clock enable input for ADREG
        .CEALUMODE(1'b1),				// 1-bit input: Clock enable input for ALUMODE
        .CEB1(1'b1),					// 1-bit input: Clock enable input for 1st stage BREG
        .CEB2(1'b1),					// 1-bit input: Clock enable input for 2nd stage BREG
        .CEC(1'b1),						// 1-bit input: Clock enable input for CREG
        .CECARRYIN(1'b1),				// 1-bit input: Clock enable input for CARRYINREG
        .CECTRL(1'b1),					// 1-bit input: Clock enable input for OPMODEREG and CARRYINSELREG
        .CED(1'b1),						// 1-bit input: Clock enable input for DREG
        .CEINMODE(1'b1),				// 1-bit input: Clock enable input for INMODEREG
        .CEM(1'b1),						// 1-bit input: Clock enable input for MREG
        .CEP(1'b1),						// 1-bit input: Clock enable input for PREG
        .RSTA(rst),						// 1-bit input: Reset input for AREG
        .RSTALLCARRYIN(rst),			// 1-bit input: Reset input for CARRYINREG
        .RSTALUMODE(rst),				// 1-bit input: Reset input for ALUMODEREG
        .RSTB(rst),						// 1-bit input: Reset input for BREG
        .RSTC(rst),						// 1-bit input: Reset input for CREG
        .RSTCTRL(rst),					// 1-bit input: Reset input for OPMODEREG and CARRYINSELREG
        .RSTD(rst),						// 1-bit input: Reset input for DREG and ADREG
        .RSTINMODE(rst),				// 1-bit input: Reset input for INMODEREG
        .RSTM(rst),						// 1-bit input: Reset input for MREG
        .RSTP(rst)						// 1-bit input: Reset input for PREG
    );
//****************************************************************************************************


endmodule
