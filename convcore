//`include "E:/code/vivado2018/MAC_20.1.6/MAC_DSP_6.10/cnn_parameter.v"
`timescale 1ns/100ps

module convcore(
	input														clk,
	input														rst,
	
	input		[1:0]											net_type,
	input														conv_stride,
	input		[`SHIFT_WIDTH - 1 : 0]							conv_shift_num,
	input		[`SHIFT_WIDTH - 1 : 0]							regular_shift_num,
	input		[2:0]											pooling_type,
	input														out_type,
	
	input		[2:0]											tk,
	input		[`TILING_COL_WIDTH - 1 : 0]						tiling_col,
	input		[3:0]											pool_tc,
	
	input		[7:0]											sel,
	input		[1:0]											shift_dir,
	input		[1:0]											conv_type,
	input		[4:0]											qval,
	
	input		[3:0]											pool_R,
	input		[4:0]											pool_C,
	
	input														indata_en,
	input		[`INBUF_RAM_ROW * `INBUF_DATAB_WIDTH - 1 : 0]	in_data,
	
	input														weight_bias_en,
	input		[3:0]											inw1_cnt,
	input		[4:0]											inw2_cnt,
	input		[3:0]											inwreb_16,
	input		[`WBUF_DATAB_WIDTH - 1 : 0]						weight0,
	
	input														psum_en,
	input		[`PBUF_RAM_ROW * `PBUF_DATAB_WIDTH - 1 : 0]		psum_data0,
	
	input		[`WBUF_DATAB_WIDTH - 1 : 0]						weight1,
	input		[`PBUF_RAM_ROW * `PBUF_DATAB_WIDTH - 1 : 0]		psum_data1,
	output	reg	[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data1,
	
	input		[`WBUF_DATAB_WIDTH - 1 : 0]						weight2,
	input		[`PBUF_RAM_ROW * `PBUF_DATAB_WIDTH - 1 : 0]		psum_data2,
	output	reg	[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data2,
	
	input		[`WBUF_DATAB_WIDTH - 1 : 0]						weight3,
	input		[`PBUF_RAM_ROW * `PBUF_DATAB_WIDTH - 1 : 0]		psum_data3,
	output	reg	[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data3,
	
	input														outdata_en,
	input		[4:0]											out_cnt,
	output	reg	[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data0
);

//****************************************************************************************************
integer							i, j;
reg	[`TILING_COL_WIDTH - 1 : 0]	tiling_col_reg;   
reg	[3:0]						pool_tc_reg;
reg	[2:0]						tk_reg;
reg	[1:0]						net_type_reg;
reg	[2:0]						pooling_type_reg;
reg								conv_stride_reg;
reg	[`SHIFT_WIDTH - 1 : 0]		conv_shift_num_reg;
reg	[`SHIFT_WIDTH - 1 : 0]		regular_shift_num_reg;
reg	[7:0]						sel_reg;
reg	[1:0]						shift_dir_reg;
reg	[1:0]						shift_dir_reg_reg;
reg	[1:0]						shift_dir_reg_reg_reg;
reg	[1:0]						conv_type_reg;
reg	[4:0]						qval_reg;

reg	[3:0]						pool_R_reg;
reg	[4:0]						pool_C_reg;

reg								indata_en_reg;
reg								indata_en_reg_reg;
reg								indata_en_reg_reg_reg_reg;
reg								indata_en_reg_reg_reg_reg_reg;
reg								indata_en_reg_reg_reg;
reg								weight_bias_en_reg;
reg	[3:0]						inwreb_16_reg;
reg								psum_en_reg;
reg								outdata_en_reg;
reg	[4:0]						out_cnt_reg;

wire[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data0_wire;
wire[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data1_wire;
wire[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data2_wire;
wire[`WR_DEPTH_ROW * `OUTBUF_DATAA_WIDTH - 1 : 0]	out_data3_wire;

reg	[`DATA_WIDTH - 1 : 0]							IR1[`IR1_DEPTH - 1 : 0];
reg	[`DATA_WIDTH - 1 : 0]							IR2[`IR2_DEPTH - 1 : 0];
reg	[`WR_DEPTH * `DATA_WIDTH - 1 : 0]				dsh;
reg	[`WR_DEPTH * `DATA_WIDTH - 1 : 0]				pooling_data;

wire												IR2_load;
reg													IR2_load_reg;
reg													IR2_load_reg_reg;
reg													IR2_load_reg_reg_reg;
assign		IR2_load = (inw1_cnt == 4'd0) & (inw2_cnt == 5'd1);

reg	[3:0]											inw1_cnt_reg;
reg	[3:0]											inw1_cnt_reg_reg;
reg	[3:0]											inw1_cnt_reg_reg_reg;
reg	[4:0]											inw2_cnt_reg;
reg	[4:0]											inw2_cnt_reg_reg;
reg	[4:0]											inw2_cnt_reg_reg_reg;
//****************************************************************************************************

// initial
//****************************************************************************************************
initial begin
	for(i = 0; i < `IR1_DEPTH; i = i + 1)
		IR1[i]		= `DATA_WIDTH 'b0;
	for(i = 0; i < `IR2_DEPTH; i = i + 1)
		IR2[i]		= `DATA_WIDTH 'b0;
end
//****************************************************************************************************

//****************************************************************************************************
always @(posedge clk) begin
	tiling_col_reg					<= tiling_col;
	tk_reg							<= tk;
	net_type_reg					<= net_type;
	pooling_type_reg				<= pooling_type;
	conv_stride_reg					<= conv_stride;
	conv_shift_num_reg				<= conv_shift_num;
	regular_shift_num_reg			<= regular_shift_num;
	sel_reg							<= sel;
	shift_dir_reg					<= shift_dir;
	shift_dir_reg_reg				<= shift_dir_reg;
	shift_dir_reg_reg_reg			<= shift_dir_reg_reg;
	conv_type_reg					<= conv_type;
	qval_reg						<= qval;
	
	pool_R_reg						<= pool_R;
	pool_C_reg						<= pool_C;
	
	indata_en_reg					<= indata_en;
	indata_en_reg_reg				<= indata_en_reg;
	indata_en_reg_reg_reg			<= indata_en_reg_reg;
	indata_en_reg_reg_reg_reg		<= indata_en_reg_reg_reg;
	indata_en_reg_reg_reg_reg_reg	<= indata_en_reg_reg_reg_reg;
	weight_bias_en_reg				<= weight_bias_en;
	inwreb_16_reg					<= inwreb_16;
	psum_en_reg						<= psum_en;
	outdata_en_reg					<= outdata_en;
	out_cnt_reg						<= out_cnt;
	
	IR2_load_reg					<= IR2_load;
	IR2_load_reg_reg				<= IR2_load_reg;
	IR2_load_reg_reg_reg			<= IR2_load_reg_reg;
	
	inw1_cnt_reg					<= inw1_cnt;
	inw1_cnt_reg_reg				<= inw1_cnt_reg;
	inw1_cnt_reg_reg_reg			<= inw1_cnt_reg_reg;
	inw2_cnt_reg					<= inw2_cnt;
	inw2_cnt_reg_reg				<= inw2_cnt_reg;
	inw2_cnt_reg_reg_reg			<= inw2_cnt_reg_reg;
end
//****************************************************************************************************

//IR1
//****************************************************************************************************
always @(posedge clk) begin
	if(indata_en_reg_reg_reg) begin
		for(j = 0; j < `IR1_DEPTH_ROW; j = j + 1) begin
			for(i = 0; i < `IR1_DEPTH_COL - 1; i = i + 1) begin
				IR1[j * `IR1_DEPTH_COL + i]		<= IR1[j * `IR1_DEPTH_COL + i + 1];         //左移
			end
			IR1[j * `IR1_DEPTH_COL + tiling_col_reg - 1]	<= in_data[(j + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH];
		end
	end
	else begin
		for(i = 0; i < `IR1_DEPTH; i = i + 1)
			IR1[i]								<= IR1[i];
	end
end
//****************************************************************************************************

//IR2
//****************************************************************************************************
always @(posedge clk) begin
	if(IR2_load_reg_reg_reg) begin
		for(i = 0; i < `IR1_DEPTH_ROW; i = i + 1)
			for(j = 0; j < `IR1_DEPTH_COL; j = j + 1) begin
				IR2[(i + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL + j]		<= IR1[i * `IR1_DEPTH_COL + j];
			end
	end
	else begin
		case(shift_dir_reg_reg_reg)
			2'b01: begin//<-
				for(i = 0; i < `IR2_DEPTH_ROW; i = i + 1)
					for(j = 0; j < `IR2_DEPTH_COL - 1; j = j + 1) begin
						IR2[i * `IR2_DEPTH_COL + j]		<= IR2[i * `IR2_DEPTH_COL + j + 1];    //左移
					end
			end
			2'b10: begin//->
				for(i = 0; i < `IR2_DEPTH_ROW; i = i + 1)
					for(j = 0; j < `IR2_DEPTH_COL - 1; j = j + 1) begin
						IR2[i * `IR2_DEPTH_COL + j + 1]	<= IR2[i * `IR2_DEPTH_COL + j];        //右移
					end
			end
			2'b11: begin//^
				for(i = 0; i < `IR2_DEPTH_ROW - 1; i = i + 1)
					for(j = 0; j < `IR2_DEPTH_COL; j = j + 1) begin
						IR2[i * `IR2_DEPTH_COL + j]		<= IR2[(i + 1) * `IR2_DEPTH_COL + j];   //下移
					end
			end
			default: begin
				for(i = 0; i < `IR2_DEPTH; i = i + 1)
					IR2[i]						<= IR2[i];
			end
		endcase
	end
end
//****************************************************************************************************

//Data sharing array
//****************************************************************************************************
always @(posedge clk) begin
	if(net_type_reg == 2'b01) begin//conv
		case(conv_type_reg)
			2'b00: begin//{1'd1,3'd1},{1'd1,3'd2}
				for(i = 0; i < `WR_DEPTH_ROW; i = i + 1)
					for(j = 0; j < `WR_DEPTH_COL; j = j + 1) begin
						dsh[(i * `WR_DEPTH_COL + j + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]		<= IR2[(i + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL];
					end
			end
			2'b01: begin//{1'd1,3'd3},{1'd1,3'd5},{1'd1,3'd7}
				for(i = 0; i < 4; i = i + 1)
					for(j = 0; j < `WR_DEPTH_ROW; j = j + 1) begin
						dsh[(j * `WR_DEPTH_COL + i +  1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]		<= IR2[(j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL + i];
						dsh[(j * `WR_DEPTH_COL + i +  5) * `DATA_WIDTH - 1 -: `DATA_WIDTH]		<= IR2[(j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL + i];
						dsh[(j * `WR_DEPTH_COL + i +  9) * `DATA_WIDTH - 1 -: `DATA_WIDTH]		<= IR2[(j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL + i];
						dsh[(j * `WR_DEPTH_COL + i + 13) * `DATA_WIDTH - 1 -: `DATA_WIDTH]		<= IR2[(j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL + i];
					end
			end
			2'b10: begin//S=2
				for(j = 0; j < (`WR_DEPTH_ROW / 2); j = j + 1)
					for(i = 0; i < `WR_DEPTH_COL; i = i + 1) begin
						dsh[(j * `WR_DEPTH_COL + i + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]							<= IR2[(j + j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL];
						dsh[((j + (`WR_DEPTH_ROW / 2)) * `WR_DEPTH_COL + i + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]	<= IR2[(j + j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL];
					end
			end
			default: begin//R<=7,s=1
				for(j = 0; j < (`WR_DEPTH_ROW / 2); j = j + 1)
					for(i = 0; i < `WR_DEPTH_COL; i = i + 1) begin
						dsh[(j * `WR_DEPTH_COL + i + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]							<= IR2[(j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL];
						dsh[((j + (`WR_DEPTH_ROW / 2)) * `WR_DEPTH_COL + i + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]	<= IR2[(j + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL];
					end
			end
		endcase
	end
	else if(net_type_reg == 2'b00) begin//fc
		for(i = 0; i < `WR_DEPTH; i = i + 1) begin
			dsh[(i + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]		<= IR2[(0 + `IR1_IR2_ROW) * `IR2_DEPTH_COL + `IR1_IR2_COL + 0];
		end
	end
	else begin
		dsh					<= `WR_DEPTH * `DATA_WIDTH 'b0;
	end
end
//****************************************************************************************************

//only pooling data array
//****************************************************************************************************
always @(posedge clk) begin
	if(net_type_reg == 2'b10) begin
		for(i = 0; i < `WR_DEPTH_ROW; i = i + 1)
			for(j = 0; j < `WR_DEPTH_COL; j = j + 1) begin
				pooling_data[(i * `WR_DEPTH_COL + j + 1) * `DATA_WIDTH - 1 -: `DATA_WIDTH]	<= IR1[i * `IR1_DEPTH_COL + j];
			end
	end
	else begin
		pooling_data		<= `WR_DEPTH * `DATA_WIDTH 'b0;
	end
end
//****************************************************************************************************

//updata out_data
//****************************************************************************************************
always @(posedge clk) begin
	out_data0			<= out_data0_wire;
	out_data1			<= out_data1_wire;
	out_data2			<= out_data2_wire;
	out_data3			<= out_data3_wire;
end
//****************************************************************************************************

//MAC instance
//****************************************************************************************************
generate
if(`MAC_NUM >= 1) begin
	MAC MAC_ins1(              //例化MAC，分4个
		.clk(clk),
		.rst(rst),
		.tk(tk_reg),
		.net_type(net_type_reg),
		.pooling_type(pooling_type_reg),
		.conv_stride(conv_stride_reg),
		.conv_shift_num(conv_shift_num_reg),
		.regular_shift_num(regular_shift_num_reg),
		.sel(sel_reg),
		.shift_dir(shift_dir_reg),
		.conv_type(conv_type_reg),
		.qval(qval_reg),
		.pool_R(pool_R_reg),
		.pool_C(pool_C_reg),
		.weight_bias_en(weight_bias_en_reg),
		.inwreb_16(inwreb_16_reg),
		.weight(weight0),
		.psum_en(psum_en_reg),
		.psum_data(psum_data0),
		.pooling_data(pooling_data),
		.dsh(dsh),
		.outdata_en(outdata_en_reg),
		.out_cnt(out_cnt_reg),
		.out_data(out_data0_wire)
	);
end

if(`MAC_NUM >= 2) begin
	MAC MAC_ins2(
		.clk(clk),
		.rst(rst),
		.tk(tk_reg),
		.net_type(net_type_reg),
		.pooling_type(pooling_type_reg),
		.conv_stride(conv_stride_reg),
		.conv_shift_num(conv_shift_num_reg),
		.regular_shift_num(regular_shift_num_reg),
		.sel(sel_reg),
		.shift_dir(shift_dir_reg),
		.conv_type(conv_type_reg),
		.qval(qval_reg),
		.pool_R(pool_R_reg),
		.pool_C(pool_C_reg),
		.weight_bias_en(weight_bias_en_reg),
		.inwreb_16(inwreb_16_reg),
		.weight(weight1),
		.psum_en(psum_en_reg),
		.psum_data(psum_data1),
		.pooling_data(pooling_data),
		.dsh(dsh),
		.outdata_en(outdata_en_reg),
		.out_cnt(out_cnt_reg),
		.out_data(out_data1_wire)
	);
end

if(`MAC_NUM >= 3) begin
	MAC MAC_ins3(
		.clk(clk),
		.rst(rst),
		.tk(tk_reg),
		.net_type(net_type_reg),
		.pooling_type(pooling_type_reg),
		.conv_stride(conv_stride_reg),
		.conv_shift_num(conv_shift_num_reg),
		.regular_shift_num(regular_shift_num_reg),
		.sel(sel_reg),
		.shift_dir(shift_dir_reg),
		.conv_type(conv_type_reg),
		.qval(qval_reg),
		.pool_R(pool_R_reg),
		.pool_C(pool_C_reg),
		.weight_bias_en(weight_bias_en_reg),
		.inwreb_16(inwreb_16_reg),
		.weight(weight2),
		.psum_en(psum_en_reg),
		.psum_data(psum_data2),
		.pooling_data(pooling_data),
		.dsh(dsh),
		.outdata_en(outdata_en_reg),
		.out_cnt(out_cnt_reg),
		.out_data(out_data2_wire)
	);
end

if(`MAC_NUM >= 4) begin
	MAC MAC_ins4(         
		.clk(clk),
		.rst(rst),
		.tk(tk_reg),
		.net_type(net_type_reg),
		.pooling_type(pooling_type_reg),
		.conv_stride(conv_stride_reg),
		.conv_shift_num(conv_shift_num_reg),
		.regular_shift_num(regular_shift_num_reg),
		.sel(sel_reg),
		.shift_dir(shift_dir_reg),
		.conv_type(conv_type_reg),
		.qval(qval_reg),
		.pool_R(pool_R_reg),
		.pool_C(pool_C_reg),
		.weight_bias_en(weight_bias_en_reg),
		.inwreb_16(inwreb_16_reg),
		.weight(weight3),
		.psum_en(psum_en_reg),
		.psum_data(psum_data3),
		.pooling_data(pooling_data),
		.dsh(dsh),
		.outdata_en(outdata_en_reg),
		.out_cnt(out_cnt_reg),
		.out_data(out_data3_wire)
	);
end
endgenerate
//****************************************************************************************************

endmodule
