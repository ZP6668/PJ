//`include "E:/code/vivado2018/MAC_20.1.6/MAC_DSP_6.10/cnn_parameter.v"
`timescale 1ns/100ps

module PE(
	input												clk,
	input												rst,
	input		[`DATA_WIDTH - 1 : 0]					in_data,
	input		[`WEIGHT_WIDTH - 1 : 0]					weight,
	input		[`DATA_WIDTH - 1 : 0]					psum,
	input		[`DATA_WIDTH - 1 : 0]					X0,
	input		[`DATA_WIDTH - 1 : 0]					X1,
	input		[`DATA_WIDTH - 1 : 0]					relu6_6,
	input		[7:0]									sel,
	input		[`SHIFT_WIDTH - 1 : 0]					shift_num,
	output reg	[`DATA_WIDTH - 1 : 0]					out_data
);

	wire		[`DATA_WIDTH + `WEIGHT_WIDTH - 2 : 0]	P_tmp;
	wire		[47:0]									P;
	reg			[`DATA_WIDTH - 1 : 0]					A_tmp;
	wire		[29:0]									A;
	reg			[`DATA_WIDTH - 1 : 0]					B_tmp;
	reg													B_flag;
	wire		[17:0]									B;
	reg			[2 * `DATA_WIDTH - 1 : 0]				C_tmp;
	wire		[47:0]									C;
	reg			[`DATA_WIDTH - 1 : 0]					Sigmoid_A;
	reg			[`DATA_WIDTH - 1 : 0]					Sigmoid_B;
	reg			[`DATA_WIDTH - 1 : 0]					result;

//	state		sel[7:6]	sel[5]	sel[4:3]	sel[2]	sel[1:0]	Z	Y	X			result
//	CONV			xx		0		10			1		01			P	M	M			A*B+P
//	ADD_BIAS		00		0		11			0		11			C	0	A:B			A:B+C
//	P_SUM			01		0		11			0		11			C	0	A:B			A:B+C
//	REGULAR			00		0		00			1		01			0	M	M			A*B
//	RELU			10		0		00			1		01			0	M	M			A*B
//	RELU6			00		1		11			1		01			C	M	M			C-A*B
//	LEAKY			01		0		00			1		01			0	M	M			A*B
//	SIGMOID			xx		0		11			1		01			C	M	M			A*B+C
//	MEAN_POOL		10		0		11			0		11			C	0	A:B			A:B+C
//	MAX_POOL		xx		1		11			0		11			C	0	A:B			C-A:B
//	ONLY_POOL		xx		1		11			0		11			C	0	A:B			C-A:B

//A
//****************************************************************************************************
always @(*) begin
	if(sel[2]) begin
		case(sel[4:3])
			2'b10:		A_tmp	= in_data;											//CONV
			default:	A_tmp	= out_data;											//REGULAR & SIGMOID & LEAKY & RELU & RELU6
		endcase
	end
	else begin
		case(sel[7:5])
			3'b000,																	//BIAS
			3'b010:		A_tmp	= {`DATA_WIDTH{out_data[`DATA_WIDTH - 1]}};			//PSUM
			3'b100,																	//MEAN_POOL
			3'b001:		A_tmp	= {`DATA_WIDTH{X1[`DATA_WIDTH - 1]}};				//MAX_POOL & ONLY_POOL
			default:	A_tmp	= `DATA_WIDTH 'b0;
		endcase
	end
end
//copy the sign bit
assign					A		= {{15{A_tmp[`DATA_WIDTH - 1]}}, A_tmp[`DATA_WIDTH - 2 : 0]};
//****************************************************************************************************

//B
//****************************************************************************************************
always @(*) begin
	if(sel[2]) begin
		case(sel[7:3])
			5'b01000:	B_tmp	= out_data[`DATA_WIDTH - 1] ? `LEAKY : `DATA_WIDTH 'b1000_0000_0000_0000;		//LEAKY
			5'b00010,																							//CONV
			5'b00000:	B_tmp	= weight;																		//REGULAR
			5'b11011,																							//
			5'b00011:	B_tmp	= Sigmoid_A;																	//SIGMOID
			5'b00111,																							//RELU6
			5'b10000:	B_tmp	= out_data[`DATA_WIDTH - 1] ? `DATA_WIDTH 'b0 : `DATA_WIDTH 'b1;				//RELU
			default:	B_tmp	= `DATA_WIDTH 'b0;
		endcase
	end
	else begin
		case(sel[7:5])
			3'b000,																								//BIAS
			3'b010:		B_tmp	= out_data;																		//PSUM
			3'b100,																								//MEAN_POOL
			3'b001:		B_tmp	= X1;																			//MAX_POOL & ONLY_POOL
			default		B_tmp	= `DATA_WIDTH 'b0;
		endcase
	end
end
always @(*) begin
	case(sel[7:3])
		5'b01000:		B_flag	= 1'b0;
		default:		B_flag	= B_tmp[`DATA_WIDTH - 1];
	endcase
end
assign					B		= {{2{B_flag}}, B_tmp[`DATA_WIDTH - 1 : 0]};
//****************************************************************************************************

//C
//****************************************************************************************************
always @(*) begin
	case({sel[7:5], sel[2]})
		4'b0011:	C_tmp		= {{16{relu6_6[`DATA_WIDTH - 1]}}, relu6_6};	//RELU6
		4'b0000:	C_tmp		= {{16{weight[`DATA_WIDTH - 1]}}, weight};		//BIAS
		4'b0010:	C_tmp		= {{16{X0[`DATA_WIDTH - 1]}}, X0};				//MAX_POOL & ONLY_POOL
		4'b0100:	C_tmp		= {{16{psum[`DATA_WIDTH - 1]}}, psum};			//PSUM
		4'b1000:	C_tmp		= {{16{X0[`DATA_WIDTH - 1]}}, X0};				//MEAN_POOL
		4'b0001:	C_tmp		= {Sigmoid_B, 16'b0};							//SIGMOID
		default:	C_tmp		= 2 * `DATA_WIDTH 'b0;
	endcase
end
assign				C			= {{16{C_tmp[2 * `DATA_WIDTH - 1]}}, C_tmp};
//****************************************************************************************************

//Sigmoid look-up table
//****************************************************************************************************
always @(*) begin
	if(out_data[`DATA_WIDTH - 1] == 1'b0) begin
		case(out_data[`DATA_WIDTH - 2 : `DATA_WIDTH - 5])
			4'b0000,
			4'b0001:	Sigmoid_A	= 16'b0000011101100100;
			4'b0010,
			4'b0011:	Sigmoid_A	= 16'b0000010011001010;
			4'b0100:	Sigmoid_A	= 16'b0000001011000110;
			4'b0101:	Sigmoid_A	= 16'b0000000111010001;
			4'b0110,
			4'b0111:	Sigmoid_A	= 16'b0000000011110001;
			4'b1000,
			4'b1001:	Sigmoid_A	= 16'b0000000001011100;
			4'b1010,
			4'b1011,
			4'b1100,
			4'b1101:	Sigmoid_A	= 16'b0000000000010111;
			4'b1110,
			4'b1111:	Sigmoid_A	= 16'b0000000000000000;
			default:	Sigmoid_A	= 16'b0000000000000000;
		endcase
	end
	else begin
		case(out_data[`DATA_WIDTH - 2 : `DATA_WIDTH - 5])
			4'b1111:	Sigmoid_A	= 16'b0000011101100100;
			4'b1110,
			4'b1101:	Sigmoid_A	= 16'b0000010011001010;
			4'b1100:	Sigmoid_A	= 16'b0000001011000110;
			4'b1011:	Sigmoid_A	= 16'b0000000111010001;
			4'b1010,
			4'b1001:	Sigmoid_A	= 16'b0000000011110001;
			4'b1000,
			4'b0111:	Sigmoid_A	= 16'b0000000001011100;
			4'b0110,
			4'b0101,
			4'b0100,
			4'b0011:	Sigmoid_A	= 16'b0000000000010111;
			4'b0010,
			4'b0001,
			4'b0000:	Sigmoid_A	= 16'b0000000000000000;
			default:	Sigmoid_A	= 16'b0000000000000000;
		endcase
	end
end

always @(*) begin
	if(out_data[`DATA_WIDTH - 1] == 1'b0) begin
		case(out_data[`DATA_WIDTH - 2 : `DATA_WIDTH - 5])
			4'b0000,
			4'b0001:	Sigmoid_B	= 16'b0001000000000000;
			4'b0010,
			4'b0011:	Sigmoid_B	= 16'b0001001010011010;
			4'b0100:	Sigmoid_B	= 16'b0001011010100011;
			4'b0101:	Sigmoid_B	= 16'b0001100100000101;
			4'b0110,
			4'b0111:	Sigmoid_B	= 16'b0001101110100111;
			4'b1000,
			4'b1001:	Sigmoid_B	= 16'b0001110111111010;
			4'b1010,
			4'b1011,
			4'b1100,
			4'b1101:	Sigmoid_B	= 16'b0001111101010010;
			4'b1110,
			4'b1111:	Sigmoid_B	= 16'b0001111111111111;
			default:	Sigmoid_B	= 16'b0000000000000000;
		endcase
	end
	else begin
		case(out_data[`DATA_WIDTH - 2 : `DATA_WIDTH - 5])
			4'b1111:	Sigmoid_B	= 16'b0001000000000000;
			4'b1110,
			4'b1101:	Sigmoid_B	= 16'b0000110101100101;
			4'b1100:	Sigmoid_B	= 16'b0000100101011100;
			4'b1011:	Sigmoid_B	= 16'b0000011011111010;
			4'b1010,
			4'b1001:	Sigmoid_B	= 16'b0000010001011000;
			4'b1000,
			4'b0111:	Sigmoid_B	= 16'b0000001000000101;
			4'b0110,
			4'b0101,
			4'b0100,
			4'b0011:	Sigmoid_B	= 16'b0000000010101101;
			4'b0010,
			4'b0001,
			4'b0000:	Sigmoid_B	= 16'b0000000000000000;
			default:	Sigmoid_B	= 16'b0000000000000000;
		endcase
	end
end
//****************************************************************************************************

//output
//****************************************************************************************************
assign				P_tmp		= P[`DATA_WIDTH + `WEIGHT_WIDTH - 2 : 0];
always @(*) begin
	case({sel[5], sel[2]})
		2'b10:		result		= P[47] ? X1 : X0;														//MAX_POOL & ONLY_POOL
		2'b11:		result		= P[47] ? relu6_6 : X0;													//RELU6
		default:	result		= {P[47], P_tmp[`DATA_WIDTH + shift_num - 2 -: `DATA_WIDTH - 1]};		//else
	endcase
end

always @(posedge clk) begin
	out_data				<= result;
end
//****************************************************************************************************

//DSP configuration
//****************************************************************************************************
generate if(`SIMULATION == 1) begin
	DSP_simodule DSP_ins(       //DSP   
		.clk(clk),
		.A(A),
		.B(B),
		.C(C),
		.P(P),
		.ALUMODE(sel[5]),
		.OPMODE(sel[4:0])
	);
end
else begin
	DSP48E1 #(               //DSP源语
		// Feature Control Attributes: Data Path Selection
		.A_INPUT("DIRECT"),				// Selects A input source, "DIRECT" (A port) or "CASCADE" (ACIN port)
		.B_INPUT("DIRECT"),				// Selects B input source, "DIRECT" (B port) or "CASCADE" (BCIN port)
		.USE_DPORT("FALSE"),				// Select D port usage (TRUE or FALSE)
		.USE_MULT("MULTIPLY"),			// Select multiplier usage ("MULTIPLY", "DYNAMIC", or "NONE")
		.USE_SIMD("ONE48"),				// SIMD selection ("ONE48", "TWO24", "FOUR12")
		// Pattern Detector Attributes: Pattern Detection Configuration
		.AUTORESET_PATDET("NO_RESET"),	// "NO_RESET", "RESET_MATCH", "RESET_NOT_MATCH" 
		.MASK(48'h3fffffffffff),			// 48-bit mask value for pattern detect (1=ignore)
		.PATTERN(48'h000000000000),		// 48-bit pattern match for pattern detect
		.SEL_MASK("MASK"),				// "C", "MASK", "ROUNDING_MODE1", "ROUNDING_MODE2" 
		.SEL_PATTERN("PATTERN"),			// Select pattern value ("PATTERN" or "C")
		.USE_PATTERN_DETECT("NO_PATDET"),	// Enable pattern detect ("PATDET" or "NO_PATDET")
		// Register Control Attributes: Pipeline Register Configuration
		.ACASCREG(1),						// Number of pipeline stages between A/ACIN and ACOUT (0, 1 or 2)
		.ADREG(0),						// Number of pipeline stages for pre-adder (0 or 1)
		.ALUMODEREG(0),					// Number of pipeline stages for ALUMODE (0 or 1)
		.AREG(1),							// Number of pipeline stages for A (0, 1 or 2)
		.BCASCREG(1),						// Number of pipeline stages between B/BCIN and BCOUT (0, 1 or 2)
		.BREG(1),							// Number of pipeline stages for B (0, 1 or 2)
		.CARRYINREG(0),					// Number of pipeline stages for CARRYIN (0 or 1)
		.CARRYINSELREG(1),				// Number of pipeline stages for CARRYINSEL (0 or 1)
		.CREG(1),							// Number of pipeline stages for C (0 or 1)
		.DREG(0),							// Number of pipeline stages for D (0 or 1)
		.INMODEREG(1),					// Number of pipeline stages for INMODE (0 or 1)
		.MREG(1),							// Number of multiplier pipeline stages (0 or 1)
		.OPMODEREG(1),					// Number of pipeline stages for OPMODE (0 or 1)
		.PREG(1)							// Number of pipeline stages for P (0 or 1)
	)
	DSP48E1_inst (
		// Cascade: 30-bit (each) output: Cascade Ports
		.ACOUT(),						// 30-bit output: A port cascade output
		.BCOUT(),						// 18-bit output: B port cascade output
		.CARRYCASCOUT(),				// 1-bit output: Cascade carry output
		.MULTSIGNOUT(),					// 1-bit output: Multiplier sign cascade output
		.PCOUT(),						// 48-bit output: Cascade output
		// Control: 1-bit (each) output: Control Inputs/Status Bits
		.OVERFLOW(),					// 1-bit output: Overflow in add/acc output
		.PATTERNBDETECT(),				// 1-bit output: Pattern bar detect output
		.PATTERNDETECT(),				// 1-bit output: Pattern detect output
		.UNDERFLOW(),					// 1-bit output: Underflow in add/acc output
		// Data: 4-bit (each) output: Data Ports
		.CARRYOUT(),					// 4-bit output: Carry output
		.P(P),							// 48-bit output: Primary data output
		// Cascade: 30-bit (each) input: Cascade Ports
		.ACIN(),						// 30-bit input: A cascade data input
		.BCIN(),						// 18-bit input: B cascade input
		.CARRYCASCIN(),					// 1-bit input: Cascade carry input
		.MULTSIGNIN(),					// 1-bit input: Multiplier sign input
		.PCIN(),						// 48-bit input: P cascade input
		// Control: 4-bit (each) input: Control Inputs/Status Bits
		.ALUMODE({2'b00, {2{sel[5]}}}),	// 4-bit input: ALU control input
		.CARRYINSEL(3'b0),				// 3-bit input: Carry select input
		.CLK(clk),						// 1-bit input: Clock input
		.INMODE(5'b00000),				// 5-bit input: INMODE control input
		.OPMODE({1'b0, sel[4:3], 1'b0, sel[2:0]}),		// 7-bit input: Operation mode input
		// Data: 30-bit (each) input: Data Ports
		.A(A),							// 30-bit input: A data input
		.B(B),							// 18-bit input: B data input
		.C(C),							// 48-bit input: C data input
		.CARRYIN(1'b0),					// 1-bit input: Carry input signal
		.D(25'd4),						// 25-bit input: D data input
		// Reset/Clock Enable: 1-bit (each) input: Reset/Clock Enable Inputs
		.CEA1(1'b1),					// 1-bit input: Clock enable input for 1st stage AREG
		.CEA2(1'b1),					// 1-bit input: Clock enable input for 2nd stage AREG
		.CEAD(1'b0),					// 1-bit input: Clock enable input for ADREG
		.CEALUMODE(1'b1),				// 1-bit input: Clock enable input for ALUMODE
		.CEB1(1'b1),					// 1-bit input: Clock enable input for 1st stage BREG
		.CEB2(1'b1),					// 1-bit input: Clock enable input for 2nd stage BREG
		.CEC(1'b1),						// 1-bit input: Clock enable input for CREG
		.CECARRYIN(1'b1),				// 1-bit input: Clock enable input for CARRYINREG
		.CECTRL(1'b1),					// 1-bit input: Clock enable input for OPMODEREG and CARRYINSELREG
		.CED(1'b0),						// 1-bit input: Clock enable input for DREG
		.CEINMODE(1'b1),				// 1-bit input: Clock enable input for INMODEREG
		.CEM(1'b1),						// 1-bit input: Clock enable input for MREG
		.CEP(1'b1),						// 1-bit input: Clock enable input for PREG
		.RSTA(rst),						// 1-bit input: Reset input for AREG
		.RSTALLCARRYIN(rst),			// 1-bit input: Reset input for CARRYINREG
		.RSTALUMODE(rst),				// 1-bit input: Reset input for ALUMODEREG
		.RSTB(rst),						// 1-bit input: Reset input for BREG
		.RSTC(rst),						// 1-bit input: Reset input for CREG
		.RSTCTRL(rst),					// 1-bit input: Reset input for OPMODEREG and CARRYINSELREG
		.RSTD(rst),						// 1-bit input: Reset input for DREG and ADREG
		.RSTINMODE(rst),				// 1-bit input: Reset input for INMODEREG
		.RSTM(rst),						// 1-bit input: Reset input for MREG
		.RSTP(rst)						// 1-bit input: Reset input for PREG
	);
end
endgenerate
//****************************************************************************************************

endmodule
